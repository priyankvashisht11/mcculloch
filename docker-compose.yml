services:
  # Elasticsearch service
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: lcf_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=changeme
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - lcf_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana (optional - for Elasticsearch management)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: lcf_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - lcf_network
    profiles:
      - monitoring

  # FastAPI application
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: lcf_api
    environment:
      - MODEL_PATH=models/lora_finetuned
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
      - HUGGING_FACE_HUB_TOKEN=${HUGGING_FACE_HUB_TOKEN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./predictions:/app/predictions
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - lcf_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Streamlit Dashboard
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: lcf_frontend
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://api:8000
    depends_on:
      - api
    networks:
      - lcf_network
    restart: unless-stopped

  # Model training service (optional)
  model_trainer:
    build:
      context: .
      dockerfile: docker/Dockerfile.model
    container_name: lcf_model_trainer
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
      - WANDB_API_KEY=alsjdf
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - elasticsearch
    networks:
      - lcf_network
    profiles:
      - training
    command: ["python", "model/train_with_lora.py", "--data_path", "data/preprocessed/sample_businesses.json"]

  # Redis (optional - for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: lcf_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lcf_network
    profiles:
      - production

  # PostgreSQL (optional - for persistent data storage)
  postgres:
    image: postgres:15-alpine
    container_name: lcf_postgres
    environment:
      - POSTGRES_DB=lcf_funding
      - POSTGRES_USER=lcf_user
      - POSTGRES_PASSWORD=lcf_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - lcf_network
    profiles:
      - production

  mongo:
    image: mongo:latest
    container_name: lcf_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - lcf_network

volumes:
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  mongo_data:

networks:
  lcf_network:
    driver: bridge 